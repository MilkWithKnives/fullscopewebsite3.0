/* === Vars (converted from SCSS to CSS custom properties) === */

:root {
    --vertPad: 80px;
    --sidePad: 70px;
    --numOfEls: 5;
    /* change if you render a different number (JS layout handles width) */
    --elMrg: 1%;
    --initAT: 1s;
    --initDelayStep: 0.1s;
    --moveAT: 0.6s;
    --expandAT: 0.7s;
    --expandDelay: 0.1s;
    --bgScaleAT: 0.8s;
    --indexHoverAT: 0.5s;
    --closeBtnAT: 0.3s;
    --closeBtnLineDelay: 0.15s;
    --coffee-900: #0D0706;
    --coffee-800: #18100D;
    --panel: #1b1412;
    /* strip bg */
    --mascarpone: rgba(246, 239, 230, 0.96);
}


/* ==== container ==== */

.cont {
    position: relative;
    overflow: hidden;
    height: 100vh;
    padding: var(--vertPad) var(--sidePad);
    background: transparent;
    /* page uses your globals bg */
}

.cont__inner {
    position: relative;
    height: 100%;
}

.cont__inner:hover .el__bg:after {
    opacity: 1;
}


/* === state helpers (scoped names to avoid collisions) === */

.s--inactive .el__inner {
    transform: translate3d(0, 100%, 0);
}

.s--el-active .el__index {
    transition: transform var(--indexHoverAT), opacity calc(var(--moveAT) / 2);
    opacity: 0;
}


/* ==== strip base ==== */

.el {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    background: var(--panel);
    transition: transform var(--moveAT) var(--expandAT), width var(--expandAT), opacity var(--moveAT) var(--expandAT), z-index 0s calc(var(--moveAT) + var(--expandAT));
    will-change: transform, width, opacity;
}

.el:not(.s--active) {
    cursor: pointer;
}

.el__overflow {
    overflow: hidden;
    position: relative;
    height: 100%;
}

.el__inner {
    overflow: hidden;
    position: relative;
    height: 100%;
    transition: transform var(--initAT);
}


/* background layer; we set --x-bg inline from React */

.el__bg {
    position: relative;
    width: calc(100vw - (var(--sidePad) * 2));
    height: 100%;
    transition: transform var(--moveAT) var(--expandAT);
    will-change: transform;
}

.el__bg:before {
    content: "";
    position: absolute;
    left: 0;
    top: -5%;
    width: 100%;
    height: 110%;
    background-size: cover;
    background-position: center center;
    transition: transform var(--initAT);
    transform: translate3d(0, 0, 0) scale(1);
    /* background image via custom prop */
    background-image: var(--x-bg, none);
}

.s--inactive .el__bg:before {
    transform: translate3d(0, -100%, 0) scale(1.2);
}

.s--active .el__bg:before {
    transition: transform var(--bgScaleAT);
}


/* dark overlay on hover / while active */

.el__bg:after {
    content: "";
    z-index: 1;
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.30);
    opacity: 0;
    transition: opacity 0.5s;
}

.s--el-active .el__bg:after {
    transition: opacity 0.5s calc(var(--moveAT) + var(--expandDelay) + var(--expandAT));
    opacity: 1 !important;
}


/* preview title (centered) */

.el__preview-cont {
    z-index: 2;
    display: grid;
    place-items: center;
    position: absolute;
    inset: 0;
    transition: all 0.3s calc(var(--initAT) + var(--initDelayStep) * (var(--numOfEls) - 1) - 0.2s);
}

.s--inactive .el__preview-cont {
    opacity: 0;
    transform: translateY(10px);
}

.s--el-active .el__preview-cont {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.5s;
}

.el__heading {
    color: var(--mascarpone);
    text-transform: uppercase;
    font-size: 18px;
    letter-spacing: .08em;
    text-shadow: 0 1px 18px rgba(0, 0, 0, .5);
}


/* expanded content */

.el__content {
    z-index: -1;
    position: absolute;
    inset: 0;
    padding: 30px;
    opacity: 0;
    pointer-events: none;
    transition: all 0.1s;
}

.s--active .el__content {
    z-index: 2;
    opacity: 1;
    pointer-events: auto;
    transition: all 0.5s calc(var(--moveAT) + var(--expandDelay) + var(--expandAT));
}

.el__text {
    text-transform: uppercase;
    font-size: 40px;
    color: #fff;
}


/* close button */

.el__close-btn {
    z-index: -1;
    position: absolute;
    right: 10px;
    top: 10px;
    width: 60px;
    height: 60px;
    opacity: 0;
    pointer-events: none;
    transition: all 0s calc(var(--closeBtnAT) + var(--closeBtnLineDelay));
    cursor: pointer;
    background: transparent;
    border: 0;
}

.s--active .el__close-btn {
    z-index: 5;
    opacity: 1;
    pointer-events: auto;
    transition: all 0s calc(var(--moveAT) + var(--expandDelay) + var(--expandAT));
}

.el__close-btn:before,
.el__close-btn:after {
    content: "";
    position: absolute;
    left: 0;
    top: 50%;
    width: 100%;
    height: 8px;
    margin-top: -4px;
    background: #fff;
    opacity: 0;
    transition: opacity 0s;
}

.s--active .el__close-btn:before,
.s--active .el__close-btn:after {
    opacity: 1;
}

.el__close-btn:before {
    transform: rotate(45deg) translateX(100%);
}

.s--active .el__close-btn:before {
    transition: all var(--closeBtnAT) calc(var(--moveAT) + var(--expandDelay) + var(--expandAT)) cubic-bezier(.72, .09, .32, 1.57);
    transform: rotate(45deg) translateX(0);
}

.el__close-btn:after {
    transform: rotate(-45deg) translateX(100%);
}

.s--active .el__close-btn:after {
    transition: all var(--closeBtnAT) calc(var(--moveAT) + var(--expandDelay) + var(--expandAT) + var(--closeBtnLineDelay)) cubic-bezier(.72, .09, .32, 1.57);
    transform: rotate(-45deg) translateX(0);
}


/* giant numeric index */

.el__index {
    overflow: hidden;
    position: absolute;
    left: 0;
    bottom: calc(var(--vertPad) * -1);
    width: 100%;
    height: 100%;
    min-height: 250px;
    text-align: center;
    font-size: calc(100vw / var(--numOfEls));
    line-height: 0.85;
    font-weight: 900;
    transform: translate3d(0, 1vw, 0);
    color: #2f3840;
    transition: transform var(--indexHoverAT), opacity calc(var(--moveAT) / 2) calc(var(--expandAT) + var(--expandDelay) + var(--moveAT));
}

.el:hover .el__index {
    transform: translate3d(0, 0, 0);
}

.el__index-back,
.el__index-front {
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
}

.el__index-back {
    opacity: 0;
    transition: opacity calc(var(--indexHoverAT) / 2) calc(var(--indexHoverAT) / 2);
}

.el:hover .el__index-back {
    opacity: 1;
}

.el__index-overlay {
    overflow: hidden;
    position: relative;
    transform: translate3d(0, 100%, 0);
    transition: transform var(--indexHoverAT) 0.1s;
    color: transparent;
}

.el__index-overlay::before {
    content: attr(data-index);
    position: absolute;
    inset: 0;
    color: #fff;
    transform: translate3d(0, -100%, 0);
    transition: transform var(--indexHoverAT) 0.1s;
}

.el:hover .el__index-overlay {
    transform: translate3d(0, 0, 0);
}

.el:hover .el__index-overlay::before {
    transform: translate3d(0, 0, 0);
}


/* layout math: position each nth-child like the Sass @for loop */

.cont__inner {
    counter-reset: x;
}

.el {
    /* width = (100% - margin*(n-1))/n */
    /* we can approximate with flex-like spacing via JS? We'll compute transform via nth-child like the original: */
}


/* We need the horizontal placement & bg shift like the original.
   We'll compute a relative width and margin via CSS function:
   Let w = (100% - elMrg*(num-1))/num, m = elMrg/w
*/

@supports (width: calc( (100% - var(--elMrg) * (var(--numOfEls) - 1)) / var(--numOfEls))) {
    .el {
        width: calc( (100% - var(--elMrg) * (var(--numOfEls) - 1)) / var(--numOfEls));
    }
    /* mRel = percentage(elMrg / width) â†’ emulate by reusing var math */
    /* Place each nth child horizontally and adjust bg track */
    .el:nth-child(1) {
        transform: translate3d(0, 0, 0);
        transform-origin: calc(0% + 50%) 50%;
    }
    .el:nth-child(1) .el__bg {
        transform: translate3d(0, 0, 0);
    }
    .el:nth-child(2) {
        transform: translate3d(calc(100% + (var(--elMrg))), 0, 0);
        transform-origin: calc(100% + (var(--elMrg)) + 50%) 50%;
    }
    .el:nth-child(2) .el__bg {
        transform: translate3d(calc(-1 * ( (100% - var(--elMrg) * (var(--numOfEls) - 1)) / var(--numOfEls))), 0, 0);
    }
    .el:nth-child(3) {
        transform: translate3d(calc(200% + (var(--elMrg) * 2)), 0, 0);
        transform-origin: calc(200% + (var(--elMrg) * 2) + 50%) 50%;
    }
    .el:nth-child(3) .el__bg {
        transform: translate3d(calc(-2 * ( (100% - var(--elMrg) * (var(--numOfEls) - 1)) / var(--numOfEls))), 0, 0);
    }
    .el:nth-child(4) {
        transform: translate3d(calc(300% + (var(--elMrg) * 3)), 0, 0);
        transform-origin: calc(300% + (var(--elMrg) * 3) + 50%) 50%;
    }
    .el:nth-child(4) .el__bg {
        transform: translate3d(calc(-3 * ( (100% - var(--elMrg) * (var(--numOfEls) - 1)) / var(--numOfEls))), 0, 0);
    }
    .el:nth-child(5) {
        transform: translate3d(calc(400% + (var(--elMrg) * 4)), 0, 0);
        transform-origin: calc(400% + (var(--elMrg) * 4) + 50%) 50%;
    }
    .el:nth-child(5) .el__bg {
        transform: translate3d(calc(-4 * ( (100% - var(--elMrg) * (var(--numOfEls) - 1)) / var(--numOfEls))), 0, 0);
    }
}


/* hover removes dark overlay */

.el:hover .el__bg:after {
    opacity: 0;
}


/* active expands to full width */

.s--active {
    z-index: 1;
    width: 100% !important;
    transform: translate3d(0, 0, 0) !important;
    transition: transform var(--moveAT), width var(--expandAT) calc(var(--moveAT) + var(--expandDelay)), z-index 0s;
}

.s--active .el__bg {
    transform: translate3d(0, 0, 0) !important;
    transition: transform var(--moveAT);
}

.s--active .el__bg:before {
    transition-delay: var(--moveAT);
    transform: scale(1.1);
}


/* --- Responsive tweaks --- */

@media (max-width: 960px) {
     :root {
        --vertPad: 60px;
        --sidePad: 32px;
    }
}

@media (max-width: 680px) {
     :root {
        --vertPad: 48px;
        --sidePad: 20px;
    }
    .el__heading {
        font-size: 16px;
    }
    .el__text {
        font-size: 26px;
    }
    .el__close-btn {
        width: 48px;
        height: 48px;
    }
}